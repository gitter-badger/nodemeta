#!/usr/bin/env node

var fs = require('fs')
var _ = require('underscore')
var ometa = require('../generated/node-ometa-translator.js')
var esprima = require('esprima')
var escodegen = require('escodegen')
var estraverse = require('estraverse')


if (process.argv.length < 3) {
    console.log("Usage: nodemeta <ometa file>")
    return
}


var createExports = true;
if (process.argv[3] === '--no-exports') {
    createExports = false;
}

var filename = process.argv[2]
var grammarSrc = fs.readFileSync(filename, 'utf-8')

var ast = esprima.parse(ometa.translate(grammarSrc))

var ast_nodemeta_OMeta = expressionNode('nodemeta.OMeta')
var ast_nodemeta_objectThatDelegatesTo = expressionNode('nodemeta.objectThatDelegatesTo')

if (createExports) {
    outputWithExports(ast);
} else {
    console.log(escodegen.generate(ast));
}






function expressionNode(expr) {
    return esprima.parse(expr).body[0].expression
}

function outputWithExports(root) {
    var exportableNames = [];
    var cleanedAst = estraverse.replace(root, {
        leave: function(node) {
            if (node.type !== 'Identifier') return
            
            if (node.name === 'OMeta') {
                return ast_nodemeta_OMeta
            } else if (node.name === 'objectThatDelegatesTo') {
                var assignment = this.parents().slice(-2)[0]
                if (assignment.type === 'AssignmentExpression' && assignment.left.type === 'Identifier') {
                    exportableNames.push(assignment.left.name)
                }
                return ast_nodemeta_objectThatDelegatesTo
            }
        }
    })

    var js = [
        'var nodemeta = require("nodemeta");',
        escodegen.generate(cleanedAst),
        ';\nmodule.exports = {\n' + exportableNames.map(function(name) {
            return '    ' + name + ': ' + name
        }).join(',\n') + '\n}'
    ].join('\n');

    console.log(js)
}
